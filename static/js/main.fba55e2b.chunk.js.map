{"version":3,"sources":["index.js"],"names":["Square","props","originalWordList","state","Words","slice","CurrentWords","ButtonText","StopWatchRunning","StartTime","Date","now","RunningTime","handleClick","bind","remainingWords","this","stopWatchRunning","buttonText","length","newWords","i","push","index","Math","floor","random","splice","setState","timer","setInterval","duration","rt","clearInterval","items","entries","value","align","className","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fba55e2b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n//import Speech from 'speak-tts';\nimport './index.css';\n\n\nclass Square extends React.Component {\n  \n  /*originalWordList =  [\"put\", \"will\", \"little\", \"out\", \"him\", \"could\", \"have\", \"with\", \"don't\", \"had\", \"what\", \"one\", \"there\", \"but\", \n          \"very\", \"just\", \"back\", \"about\", \"come\", \"went\", \"for\", \"some\", \"made\", \"the\", \"and\", \"a\", \"to\", \"said\", \"all\",\n        \"you\", \"me\", \"she\", \"come\", \"go\", \"of\", \"where\", \"was\", \"far\", \"away\", \"am\", \"we\", \"her\", \"they\", \"as\", \"be\",\n      \"at\", \"not\", \"then\"];\n*/\n\n  originalWordList = [\"has\",\"had\",\"an\",\"as\",\"bed\",\"but\",\"did\",\"from\",\"got\",\"school\",\"him\",\"his\",\"if\",\"jump\",\"not\",\"of\",\"want\",\"one\",\"little\",\"there\",\"do\",\"off\",\"could\",\"put\",\"than\",\"that\",\"them\",\"then\",\"us\",\"when\",\"low\",\"new\",\"about\",\"another\",\"because\",\"by\",\"can’t\",\"down\",\"half\",\"home\",\"just\",\"live\",\"after\",\"back\",\"been\",\"called\",\"first\",\"have\",\"house\",\"last\",\"made\",\"again\",\"ball\",\"brother\",\"came\",\"don’t\",\"good\",\"her\",\"how\",\"laugh\",\"make\",\"many\",\"much\",\"next\",\"old\",\"out\",\"seen\",\"so\",\"their\",\"time\",\"tree\",\"who\",\"were\",\"may\",\"must\",\"night\",\"once\",\"over\",\"should\",\"some\",\"these\",\"too\",\"water\",\"what\",\"would\",\"more\",\"name\",\"now\",\"our\",\"people\",\"sister\",\"take\",\"took\",\"very\",\"way\",\"where\",\"your\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\",\"day\",\"week\",\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\",\"month\",\"year\",\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\",\"thirteen\",\"fourteen\",\"fifteen\",\"sixteen\",\"seventeen\",\"eighteen\",\"nineteen\",\"twenty\",\"number\",\"red\",\"orange\",\"green\",\"blue\",\"black\",\"white\",\"brown\",\"pink\",\"purple\",\"grey\"]\n\n  constructor(props) {\n    super(props);\n    \n    this.state = \n      { \n        Words: this.originalWordList.slice(),\n        CurrentWords: [],\n        ButtonText : \"Start\",\n        StopWatchRunning : false,\n        StartTime : Date.now(),\n        RunningTime : \"0\"\n      };\n    this.handleClick = this.handleClick.bind(this);\n    //this.speech.init();\n  }\n\n  handleClick()\n  {\n    var remainingWords = this.state.Words;\n    var stopWatchRunning = this.state.StopWatchRunning;\n    var buttonText = \"Next\"\n\n    if (remainingWords.length === 0)\n    {\n      if (stopWatchRunning)\n      {\n        stopWatchRunning = false;\n        buttonText = \"Well Done Viraj! Start Again?\";\n      }\n      else\n      {\n        // we're starting again\n        stopWatchRunning = true;\n        remainingWords = this.originalWordList.slice();\n      }\n    }\n    else\n    {\n      stopWatchRunning = true;\n    }\n    \n    var newWords = []\n    \n    if (remainingWords.length > 0)\n    {\n      for (var i = 0; i < 5; ++i)\n      {\n        if (remainingWords.length === 0)\n        {\n          buttonText = \"Done\";\n          newWords.push(\"-\");\n        }\n        else\n        {\n          var index = Math.floor(Math.random() * remainingWords.length)\n          newWords.push(remainingWords[index]);\n          remainingWords.splice(index, 1);\n        }\n      }\n  }\n\n    this.setState(state => {\n      \n      if (stopWatchRunning && !this.state.StopWatchRunning)\n      {\n        this.setState({ StartTime: Date.now() });\n        this.timer = setInterval(() => {\n          var duration = Date.now() - this.state.StartTime\n          var rt = Math.floor(duration/1000);\n          this.setState({ RunningTime: rt });\n\n          if (rt > 300)\n            clearInterval(this.timer);\n        });\n      }\n      else if (!stopWatchRunning)\n        clearInterval(this.timer);\n      \n      return {\n      Words : remainingWords,\n      CurrentWords : newWords,\n      ButtonText : buttonText,\n      StopWatchRunning: stopWatchRunning\n    }});\n\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  render() {\n\n\n  const items = []\n\n  for (const value of this.state.CurrentWords.entries()) {\n    items.push(<div align=\"center\">{value[1]}</div>)\n  }\n      return (\n        <div>\n          {items}\n          <button className=\"square\" onClick={this.handleClick}>\n            {this.state.ButtonText}\n          </button>\n          <div align=\"center\">{this.state.RunningTime} seconds</div>        \n        </div>\n      );\n    }\n  }\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Square />,\n    document.getElementById('root')\n  );\n  "],"sourceRoot":""}